name: 'Terraform Validation & Linting'

on:
  pull_request:
    branches: ["main"]
    paths:
      - 'infra/**'
      - '**.tf'
      - '**.tfvars'

env:
  AWS_REGION: "us-east-1"
  WORKING_DIR: infra

jobs:
  checkov-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.8
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/terraform-aws-ecs-webapp #change to reflect your IAM roleâ€™s ARN
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

    #   - name: Test with Checkov
    #     id: checkov
    #     uses: bridgecrewio/checkov-action@v12
    #     with:
    #       output_format: cli,json
    #       output_file_path: console,results_checkov.json
    #       directory: ${{ env.WORKING_DIR }}
    #       framework: terraform

    #   - name: Publish Checkov report
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: CheckovReport
    #       path: ./results_checkov.json

  tf-linting:
    # needs: checkov-scan
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/terraform-aws-ecs-webapp
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: 1.9.0

      - name: Set Terraform environment variable
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "TF_VAR_env=dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/main" && "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "TF_VAR_env=prod" >> $GITHUB_ENV
          else
            echo "TF_VAR_env=test" >> $GITHUB_ENV
          fi

      - name: Terraform init, fmt, and validate
        working-directory: ${{ env.WORKING_DIR }}
        id: terraform
        run: |
          terraform init
          terraform fmt --recursive -no-color
          terraform validate -no-color

      - name: Install TFLint
        id: tflint_install
        run: curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: TFLint Init
        working-directory: ${{ env.WORKING_DIR }}
        run: tflint --init

      - name: Run TFLint
        id: run_tflint
        working-directory: ${{ env.WORKING_DIR }}
        run: |
            tflint --recursive --no-color --format=default | tee tflint_report.txt
            
      - name: Show TFLint
        id: show_tflint
        working-directory: ${{ env.WORKING_DIR }}
        run: cat tflint_report.txt

      - name: Publish Tflint Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tflintReport
          path: ${{ env.WORKING_DIR }}/tflint_report.txt

  # terratest:
  #   # needs: [checkov-scan, tf-linting]
  #   needs: [tf-linting]
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Az CLI login
  #       if: env.ARM_USE_OIDC == 'true'
  #       uses: azure/login@v2
  #       with:
  #         client-id: ${{ env.ARM_CLIENT_ID }}
  #         tenant-id: ${{ env.ARM_TENANT_ID }}
  #         subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
  #         allow-no-subscriptions: true

  #     - name: Set up Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: '>=1.17.0'

  #     - name: Install Python Dependencies
  #       working-directory: ${{ env.WORKING_DIR }}/tests
  #       run: pip install numpy

  #     - name: Initialize Go module
  #       working-directory: ${{ env.WORKING_DIR }}/tests
  #       run: go mod init vertexai_index

  #     - name: Download dependencies
  #       working-directory: ${{ env.WORKING_DIR }}/tests
  #       run: go mod tidy

  #     - name: Test with Terratest
  #       working-directory: ${{ env.WORKING_DIR }}/tests
  #       run: |
  #         go test | tee terratest_output.json
  #         cp ./terratest_output.json $ROOT_PATH >> /dev/null 2>&1

  #     - name: Publish Terratest report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: TerratestReport
  #         path: ./terratest_output.json
